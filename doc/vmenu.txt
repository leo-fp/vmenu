*vmenu.txt*

Author:		leo-fp
Version:	0.2.0

1. Introduction...................................................|vmenu-intro|
2. Installation............................................|vmenu-installation|
3. Functions..................................................|vmenu-Functions|
    3.1 vmenu#openContextWindow()...................|vmenu#openContextWindow()|
    3.2 vmenu#installTopMenu().........................|vmenu#installTopMenu()|
    3.3 vmenu#openTopMenu()...............................|vmenu#openTopMenu()|
    3.4 vmenu#itemTips().....................................|vmenu#itemTips()|
    3.5 vmenu#parse_context()...........................|vmenu#parse_context()|
    3.6 vmenu#existFileType()...........................|vmenu#existFileType()|
4. vmenu item field	.........................................|vmenu-item-field|
    4.1 show-ft.......................................................|show-ft|
    4.2 show-mode...................................................|show-mode|
    4.3 deactive-mode...........................................|deactive-mode|
    4.4 show-if.......................................................|show-if|
    4.5 deactive-if...............................................|deactive-if|
    4.6 name.............................................................|name|
    4.7 cmd..............................................................|name|
    4.8 tip...............................................................|tip|
    4.9 icon.............................................................|icon|
    4.10 subItemList..............................................|subItemList|
5. vmenu Tips and Tricks...........................................|vmenu-tips|
6. global variables....................................|vmenu-global-variables|
    6.1 g:vmenu_enable_log.............................|vmenu-vmenu_enable_log|
    6.2 g:vmenu_enable_echo_tips.......................|vmenu_enable_echo_tips|
7. vmenu Changelog............................................|vmenu-changelog|

==============================================================================
1. Introduction                                                    *vmenu-intro*

another menu plugin. made as replacement of menu and context menu of
vim-quickui in personal use case.

==============================================================================
2. Installation 						                    *vmenu-installation*

Packer.nvim >
    use { "leo-fp/vmenu",
        requires = "skywind3000/vim-quickui"
    }

==============================================================================
3. Functions                                                   *vmenu-Functions*

3.1 vmenu#openContextWindow(content, opts) 			 *vmenu#openContextWindow()*
------------
Open context window.

content: parsed context item list. can be create by 'vmenu#parse_context'
opts: keep as a parameter compatible with vim-quickui. It is not in using
currently.

3.2 vmenu#installTopMenu(name, userTopMenu)				*vmenu#installTopMenu()*
-------------------------
install top menu.
userTopMenu: the context menu items.
context items of vim-quickui and vmenu can be mixed like this: >
    call vmenu#installTopMenu('menu_name', [
                \ [ "vim-quickui item name", '', ""] ,
                \ ] +  vmenu#parse_context([
                    \#{name: 'vmenu item name', cmd: ''},
                    \], g:VMENU#ITEM_VERSION.VMENU)
                \)

3.3 vmenu#openTopMenu()				        	           *vmenu#openTopMenu()*
------------------
open installed top menu

3.4 vmenu#itemTips()                                          *vmenu#itemTips()*
----------------------------------------
Return current focused item tips.

It is useful if you want show item tips in statusline.

3.5 vmenu#parse_context(userItemList, itemVersion)       *vmenu#parse_context()*
----------------------------------------
Parse quickui item or vmenu item to inner format.

userItemList: quickui item list or vmenu item list.
itemVersion: g:VMENU#ITEM_VERSION.QUICKUI (default) or
g:VMENU#ITEM_VERSION.QUICKUI
return: inner item list that can be used in vmenu

3.6 vmenu#existFileType(ft)                              *vmenu#existFileType()*
----------------------------------------
Check if there are any <ft> type buffer opened in current tab.
Designed to work with show-if or deactive-if.

If you want vmenu item only appears when you opened specific file type,
regardless of where your cursor is currently.
>
    #{name: 'name', cmd: '', show-if: vmenu#existFileType("vim")}

ft: string of file type.
return: 1: exist. 0: not exist

NOTE: If the <ft> you want to detect is only opened in other tab, this will
return 0.

==============================================================================
4. vmenu item field						                      *vmenu-item-field*

4.1 show-ft                                                            *show-ft*
----------------------------------------
If you want vmenu item only appears in specific file types.
>
    #{name: 'item name', cmd: '', show-ft: ["NvimTree"]}

File type can be get by >
    :echo &ft

4.2 show-mode                                                  *vmenu-show-mode*
----------------------------------------
If you want vmenu item only appears in specific mode.
WARNING: There are some bugs in detecting visual mode, so it is not recomended
to use currently.
>
    #{name: 'item name', cmd: '', show-mode: ["n"]}

You can pass different context menu as altarnative approach.

4.3 deactive-mode                                          *vmenu-deactive-mode*
----------------------------------------
If you want vmenu item be seeable but not executable in specific mode.
WARNING: There are some bugs in detecting visual mode, so it is not recomended
to use currently.
>
    #{name: 'item name', cmd: '', deactive-mode: ["n"]}

You can pass different context menu as altarnative approach.

4.4 show-if                                                      *vmenu-show-if*
----------------------------------------
You can define a function to control whether to show a item.
The function receives a dict that contains some status of editor when you open
a vmenu window and return 0 -> do not show, 1 -> show.

To see structure of the dict, check s:GlobalStautus in code.


4.5 deactive-if                                              *vmenu-deactive-if*
----------------------------------------
You can define a function to control whether to deactive a item.
The function receives a dict that contains some status of editor when you open
a vmenu window and return 0 -> do not deactive, 1 -> deactive.

To see structure of the dict, check s:GlobalStautus in code.


4.6 name                                                            *vmenu-name*
----------------------------------------
Context menu text.
If you want to mark a char in name field as shortcut key. Do like this
>
   #{name: "&hello", cmd: "echo 1"}

When you pressing 'h' in a context menu, the cmd 'echo 1' will be executed.
If you define this field as '&Hello', the cmd will be executed by pressing
'h'.
It is applicable in top menu and context menu.


4.7 cmd                                                              *vmenu-cmd*
----------------------------------------
The Ex command you want to execute.

Examples:
>
   #{name: "&hello", cmd: "echo 1"}
   #{name: "&hello", cmd: "Acommand"}
   #{name: "&hello", cmd: 'call plugin-name#function-name("param")'}
   #{name: "&hello", cmd: 'norm j'}


4.8 tip                                                              *vmenu-tip*
----------------------------------------
A text that you want to show when you focusing a vmen item.
It is usually used to describe item functionality.


4.9 icon                                                            *vmenu-icon*
----------------------------------------
Item icon.
Indentation is automatically processed by the plugin.


4.10 subItemList                                             *vmenu-subItemList*
----------------------------------------
A vmenu item list.
If defined, the list will be opened as second menu when executing a vmenu
item.

Example:
>
    #{name: 'name', cmd: 'echo 1', subItemList: [#{name: 'sub name', cmd: 'echo 1.1'}]},

==============================================================================
5. vmenu Tips and Tricks						                    *vmenu-tips*
see README.md in root directory of the plugin.


==============================================================================
6. global variables						                *vmenu-global-variables*
6.1 vmenu_enable_log                                    *vmenu-vmenu_enable_log*
----------------------------------------
Print log message to message-history or not. Disabled by default.
If you want to enable it.
>
    :let g:vmenu_enable_log = 1

Check message-history:
>
    :messages


6.2 vmenu_enable_echo_tips                              *vmenu_enable_echo_tips*
----------------------------------------
Print item tips to command line or not. Enable by default.
If you want to enable it.
>
    :let g:vmenu_enable_echo_tips = 0


==============================================================================
7. vmenu Changelog					                           *vmenu-changelog*

see README.md in root directory of the plugin.

# vim:ft=help
